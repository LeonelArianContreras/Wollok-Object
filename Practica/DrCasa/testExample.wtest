import src.Cuerpo.Enfermedad.*
import src.Humanos.Persona.*
import src.Humanos.Medico.*
import src.Humanos.JefeDepto.*
import src.Cuerpo.GrupoSanguineo.*

describe "Dr Casa - Temporada 1" {

    const otitis100 = new EnfermedadInfecciosa(cantidadCelulasAmenazadas = 100)
    const malaria500 = new EnfermedadInfecciosa(cantidadCelulasAmenazadas = 500)
    const malaria800 = new EnfermedadInfecciosa(cantidadCelulasAmenazadas = 800)
    const lupus10000 = new EnfermedadAutoinmune(cantidadCelulasAmenazadas = 10000)

    const rhPositivo = new GrupoSanguineo(tipo = a, factor = factorNegativo)

    const frank = new Persona(temperatura = 36, celulasDelCuerpo = 3000000, grupoSanguineo = rhPositivo)
    const logan = new Persona(temperatura = 36, celulasDelCuerpo = 3500000, grupoSanguineo = rhPositivo)

    method initialize() {
        frank.contraer(malaria800)
        
        logan.contraer(otitis100)
        logan.contraer(malaria500)
        logan.contraer(lupus10000)
    }

    test "1. Cuando Frank contrae malaria de 800 celulas amenazadas se agrega perfectamente" {
        assert.that(frank.tiene(malaria800))
    }

    test "2. Que una malaria que contrajo Logan se reproduzca bien" {
        malaria500.reproducirse()
        assert.equals(1000, malaria500.cantidadCelulasAmenazadas())
    }

    test "3.a Que las celulas afectadas de Logan sean unicamente atacadas por enfermedades agresivas" {
        logan.vivirUnDia()
        assert.equals(0, logan.cantidadDeCelulasAfectadasPorEnfermedadesAgresivas())
    }

    test "3.b Que la enfermedad de Logan mas efectuante sea el lupus" {
        logan.vivirUnDia()
        assert.equals(lupus10000, logan.enfermedadMasChupadoraDeCelulas())
    }

    test "3.c Luego de vivir un dia, Logan no está en coma" {
        logan.vivirUnDia()
        assert.notThat(logan.estaEnComa())
    }
}

describe "Dr Casa - Temporada 2" {

    const otitis100 = new EnfermedadInfecciosa(cantidadCelulasAmenazadas = 100)
    const malaria500 = new EnfermedadInfecciosa(cantidadCelulasAmenazadas = 500)
    const malaria800 = new EnfermedadInfecciosa(cantidadCelulasAmenazadas = 800)
    const lupus10000 = new EnfermedadAutoinmune(cantidadCelulasAmenazadas = 10000)

    const rhPositivo = new GrupoSanguineo(tipo = a, factor = factorNegativo)


    const frank = new Persona(temperatura = 36, celulasDelCuerpo = 3000000, grupoSanguineo = rhPositivo)
    const logan = new Persona(temperatura = 36, celulasDelCuerpo = 3500000, grupoSanguineo = rhPositivo)

    const cameron = new Medico(dosis = 10, temperatura = 36, celulasDelCuerpo = 3100000, grupoSanguineo = rhPositivo)

    const house = new JefeDepto(temperatura = 36, celulasDelCuerpo = 3000000, grupoSanguineo = rhPositivo)

    method initialize() {
        frank.contraer(malaria800)
        
        logan.contraer(otitis100)
        logan.contraer(malaria500)
        logan.contraer(lupus10000)

        house.agregarSubordinado(cameron)
    }

    test "0. Se agrega bien al subordinado" {
        assert.that(house.subordinaA(cameron))
    }

    test "1.a Se atenua bien una enfermedad infecciosa" {
        malaria500.atenuarse(100)
        assert.equals(400, malaria500.cantidadCelulasAmenazadas())
    }

    test "1.b Se atenua bien una enfermedad autoinmune" {
        lupus10000.atenuarse(500)
        assert.equals(9500, lupus10000.cantidadCelulasAmenazadas())
    }

    test "2.a Un medico atiende bien a una persona" {
        cameron.atenderA(logan)
        assert.equals(350, malaria500.cantidadCelulasAmenazadas())

    }

    test "2.b Un medico atiende bien a una persona" {
        cameron.atenderA(logan)
        assert.equals(9850, lupus10000.cantidadCelulasAmenazadas())

    }

    test "2.c Un medico atiende bien a una persona" {
        cameron.atenderA(logan)
        assert.notThat(logan.tiene(otitis100))
    }

    test "3. Un jefe de departamento atiende bien a un medico" {
        cameron.contraer(lupus10000)
        house.atenderA(cameron)
        assert.equals(9700, lupus10000.cantidadCelulasAmenazadas())
    }
}

describe "Dr Casa - Temporada 3" {

    const grupoA_factorPos = new GrupoSanguineo(tipo = a, factor = factorPositivo)
    const grupoO_factorNeg = new GrupoSanguineo(tipo = o, factor = factorNegativo)

    const cameron = new Medico(dosis = 10, temperatura = 36, celulasDelCuerpo = 3100000, grupoSanguineo = grupoA_factorPos)
    const foreman = new Persona(temperatura = 36, celulasDelCuerpo = 20000, grupoSanguineo = grupoA_factorPos)
    const house = new JefeDepto(temperatura = 36, celulasDelCuerpo = 3000000, grupoSanguineo = grupoO_factorNeg)

    test "1. Cameron le intentara donar a House pero no podrá" {
        assert.throwsException{cameron.donarA(house, 10000000)}
    }

    test "2. Cameron le intentara donar a Foreman succesfully, por ende, ForeMan tendra 20500 celulas" {
        cameron.donarA(foreman, 800000)
        assert.equals(820000, foreman.cantidadCelulas())
    }
}